name: Build and Deploy SaudiMart Services

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [MartAuth, MartGateway, MartProduct, MartEureka]
        include:
          - service: MartAuth
            port: 8081
          - service: MartGateway
            port: 8080
          - service: MartProduct
            port: 8082
          - service: MartEureka
            port: 8761

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # Cache Maven dependencies (this is the most important cache)
    - name: Cache Maven dependencies
      uses: actions/cache@v4.2.3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    # Build each service JAR using Maven Wrapper
    - name: Build ${{ matrix.service }}
      working-directory: ${{ matrix.service }}
      run: |
        chmod +x mvnw
        ./mvnw clean package -DskipTests
    
    # Upload the entire service directory as artifact (including target folder)
    - name: Upload service artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-service
        path: ${{ matrix.service }}/
        retention-days: 1

  docker:
    needs: build
    runs-on: ubuntu-latest
    environment: DockerEnv
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    # Download all service artifacts (this will recreate the folder structure)
    - name: Download MartAuth service
      uses: actions/download-artifact@v4
      with:
        name: MartAuth-service
        path: MartAuth/
        
    - name: Download MartGateway service
      uses: actions/download-artifact@v4
      with:
        name: MartGateway-service
        path: MartGateway/
        
    - name: Download MartProduct service
      uses: actions/download-artifact@v4
      with:
        name: MartProduct-service
        path: MartProduct/
        
    - name: Download MartEureka service
      uses: actions/download-artifact@v4
      with:
        name: MartEureka-service
        path: MartEureka/
    
    # Verify the structure matches your local setup
    - name: Verify directory structure
      run: |
        echo "Root directory structure:"
        ls -la
        echo ""
        for service in MartAuth MartGateway MartProduct MartEureka; do
          echo "Contents of $service:"
          ls -la $service/
          echo "Contents of $service/target:"
          ls -la $service/target/ || echo "No target directory found"
          echo ""
        done
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Build and push Docker images for each service (simple approach)
    - name: Build and push Docker images
      run: |
        for service in MartAuth MartGateway MartProduct MartEureka; do
          echo "Building $service..."
          
          # Verify JAR exists before building
          if [ ! -f "$service/target/"*.jar ]; then
            echo "Error: No JAR file found in $service/target/"
            exit 1
          fi
          
          # Build from service directory (same as Docker Compose does)
          IMAGE_TAG="sayeedajmal/${service,,}:latest"
          echo "Building and pushing image: $IMAGE_TAG"
          
          # Simple Docker build (no advanced caching)
          docker build -t $IMAGE_TAG $service/
          
          # Push to Docker Hub
          docker push $IMAGE_TAG
          
          echo "Successfully built and pushed $IMAGE_TAG"
        done
